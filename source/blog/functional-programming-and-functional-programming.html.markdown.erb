---
published_date: 2014-11-02
title: Functional Programming vs. "Functional" Programming
author: Jared Norman
---
I see a lot of "functional" style programming being done in languages like
JavaScript and Ruby and it made start thinking about the implications of
emulating the functional style in non-functional languages with respect to
domain modelling.

## Functional vs. "Functional"

I'm going to make a distinction in this article between "functional"
programming and functional programming. You probaly already know what
functional programming is. According to Google:

> In computer science, functional programming is a programming paradigm, a style
> of building the structure and elements of computer programs, that treats
> computation as the evaluation of mathematical functions and avoids
> changing-state and mutable data.

That's very broad, but for the purposes of this discussion we'll be talking
about the two I'm most familiar with, [Elixir](http://elixir-lang.org) and (to
a lesser extent) [Clojure](http://clojure.org/). The ideas should however
extend to other functional languages.

When I talk about "functional" programming I'm referring to the use of a
variety of collection processing functions/methods that appear in such places
as Ruby's `Enumerable` module and JavaScripts Underscore/Lodash libraries.
